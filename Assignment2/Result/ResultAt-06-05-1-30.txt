
Assignment2 Test Run (This is the result I will be using!)

==Platform that code is running==
Linux lennon.secs.oakland.edu 2.6.32-504.30.3.el6.x86_64 #1 SMP Tue Jul 14 11:18:03 CDT 2015 x86_64 x86_64 x86_64 GNU/Linux

================ sum.c thread = 1 ==================

======================================================================================================
	Sum 10000000 numbers with 1 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:				29.999971	666.667302
Sum Parallel:			29.999971	666.667302
Sum Parallel For:		31.000137	645.158432

================ sum.c thread = 2 ==================

======================================================================================================
	Sum 10000000 numbers with 2 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:				29.999971	666.667302
Sum Parallel:			16.000032	1249.997467
Sum Parallel For:		14.999866	1333.345201

================ sum.c thread = 4 ==================

======================================================================================================
	Sum 10000000 numbers with 4 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:				31.000137	645.158432
Sum Parallel:			7.999897	2500.032187
Sum Parallel For:		8.000135	2499.957681

================ sum.c thread = 8 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:				29.999971	666.667302
Sum Parallel:			5.000114	3999.908449
Sum Parallel For:		3.999949	5000.064374

================ mm.c thread = 1 ==================

	C[1024][1024] = A[1024][1024] * B[1024][1024] with 1 tasks
======================================================================================================
	C[1024][1024] = A[1024][1024] * B[1024][1024] with 1 tasks
------------------------------------------------------------------------------------------------------
Performance:				Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
mm:							6865.000010	156.408131
mm_parallel_row:			9331.000090	115.072534
mm_parallel_col:			9411.999941	114.082217
mm_parallel_rowcol:			9408.999920	114.118592
mm_parallel_for_row:		9324.000120	115.158924
mm_parallel_for_col:		9322.999954	115.171278
mm_parallel_for_rowcol:		9325.000048	115.146576

================ mm.c thread = 2 ==================

	C[1024][1024] = A[1024][1024] * B[1024][1024] with 2 tasks
======================================================================================================
	C[1024][1024] = A[1024][1024] * B[1024][1024] with 2 tasks
------------------------------------------------------------------------------------------------------
Performance:				Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
mm:							6868.000031	156.339811
mm_parallel_row:			4677.000046	229.579178
mm_parallel_col:			4713.999987	227.777223
mm_parallel_rowcol:			4722.999811	227.343186
mm_parallel_for_row:		4700.000048	228.455705
mm_parallel_for_col:		4687.000036	229.089357
mm_parallel_for_rowcol:		4680.000067	229.432010

================ mm.c thread = 4 ==================

	C[1024][1024] = A[1024][1024] * B[1024][1024] with 4 tasks
======================================================================================================
	C[1024][1024] = A[1024][1024] * B[1024][1024] with 4 tasks
------------------------------------------------------------------------------------------------------
Performance:				Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
mm:							6903.000116	155.547125
mm_parallel_row:			2421.000004	443.511699
mm_parallel_col:			2454.999924	437.369392
mm_parallel_rowcol:			2431.999922	441.505698
mm_parallel_for_row:		2404.000044	446.648005
mm_parallel_for_col:		2365.000010	454.013454
mm_parallel_for_rowcol:		2377.000093	451.721406

================ mm.c thread = 8 ==================

	C[1024][1024] = A[1024][1024] * B[1024][1024] with 8 tasks
======================================================================================================
	C[1024][1024] = A[1024][1024] * B[1024][1024] with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:				Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
mm:							6861.999989	156.476512
mm_parallel_row:			1253.000021	856.936797
mm_parallel_col:			1265.000105	848.807696
mm_parallel_rowcol:			1269.999981	845.466016
mm_parallel_for_row:		1259.000063	852.852876
mm_parallel_for_col:		1271.999836	844.136763
mm_parallel_for_rowcol:		1262.000084	850.825477

================ sum.c static ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			32.000065	624.998733
Sum Parallel:			3.999949	5000.064374
Sum Parallel For:		4.999876	4000.099185

================ sum.c static, 2000 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			30.999899	645.163394
Sum Parallel:			5.000114	3999.908449
Sum Parallel For:		3.999949	5000.064374

================ sum.c static, 200 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			31.000137	645.158432
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		6.999969	2857.155313

================ sum.c static, 20 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			30.999899	645.163394
Sum Parallel:			5.000114	3999.908449
Sum Parallel For:		7.999897	2500.032187

================ sum.c dynamic, 2000 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			5.000114	3999.908449
Sum Parallel For:		4.999876	4000.099185

================ sum.c dynamic, 200 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			5.000114	3999.908449
Sum Parallel For:		6.999969	2857.155313

================ sum.c dynamic, 20 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			30.000210	666.662004
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		87.000132	229.884710

================ sum.c guided, 200000 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			5.000114	3999.908449
Sum Parallel For:		3.999949	5000.064374

