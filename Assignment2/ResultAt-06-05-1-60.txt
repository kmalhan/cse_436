
Assignment2 Test Run

==Platform that code is running==
Linux lennon.secs.oakland.edu 2.6.32-504.30.3.el6.x86_64 #1 SMP Tue Jul 14 11:18:03 CDT 2015 x86_64 x86_64 x86_64 GNU/Linux

================ sum.c thread = 1 ==================

======================================================================================================
	Sum 10000000 numbers with 1 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			29.999971	666.667302
Sum Parallel For:		30.999899	645.163394

================ sum.c thread = 2 ==================

======================================================================================================
	Sum 10000000 numbers with 2 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			16.999960	1176.473360
Sum Parallel For:		15.000105	1333.324009

================ sum.c thread = 4 ==================

======================================================================================================
	Sum 10000000 numbers with 4 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			31.000137	645.158432
Sum Parallel:			7.999897	2500.032187
Sum Parallel For:		8.000135	2499.957681

================ sum.c thread = 8 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			30.000210	666.662004
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		5.000114	3999.908449

================ mm.c thread = 1 ==================

	C[1024][1024] = A[1024][1024] * B[1024][1024] with 1 tasks
======================================================================================================
	C[1024][1024] = A[1024][1024] * B[1024][1024] with 1 tasks
------------------------------------------------------------------------------------------------------
Performance:				Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
mm:				6875.000000	156.180629
mm_parallel_row:		9319.000006	115.220713
mm_parallel_col:		9397.000074	114.264320
mm_parallel_rowcol:		9397.999763	114.252165
mm_parallel_for_row:		9316.000223	115.257814
mm_parallel_for_col:		9316.999912	115.245447
mm_parallel_for_rowcol:		9322.999954	115.171278

================ mm.c thread = 2 ==================

	C[1024][1024] = A[1024][1024] * B[1024][1024] with 2 tasks
======================================================================================================
	C[1024][1024] = A[1024][1024] * B[1024][1024] with 2 tasks
------------------------------------------------------------------------------------------------------
Performance:				Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
mm:				6865.000010	156.408131
mm_parallel_row:		4677.999973	229.530105
mm_parallel_col:		4711.000204	227.922262
mm_parallel_rowcol:		4717.999935	227.584112
mm_parallel_for_row:		4671.999931	229.824880
mm_parallel_for_col:		4674.999952	229.677398
mm_parallel_for_rowcol:		4673.000097	229.775690

================ mm.c thread = 4 ==================

	C[1024][1024] = A[1024][1024] * B[1024][1024] with 4 tasks
======================================================================================================
	C[1024][1024] = A[1024][1024] * B[1024][1024] with 4 tasks
------------------------------------------------------------------------------------------------------
Performance:				Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
mm:				6767.999887	158.649799
mm_parallel_row:		2413.000107	444.982087
mm_parallel_col:		2408.999920	445.720988
mm_parallel_rowcol:		2420.000076	443.694955
mm_parallel_for_row:		2391.000032	449.076457
mm_parallel_for_col:		2404.999971	446.462302
mm_parallel_for_rowcol:		2398.999929	447.578931

================ mm.c thread = 8 ==================

	C[1024][1024] = A[1024][1024] * B[1024][1024] with 8 tasks
======================================================================================================
	C[1024][1024] = A[1024][1024] * B[1024][1024] with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:				Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
mm:				6911.999941	155.344594
mm_parallel_row:		1262.000084	850.825477
mm_parallel_col:		1264.999866	848.807856
mm_parallel_rowcol:		1266.000032	848.137280
mm_parallel_for_row:		1263.000011	850.151872
mm_parallel_for_col:		1263.999939	849.479332
mm_parallel_for_rowcol:		1268.000126	846.799462

================ sum.c static ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		3.999949	5000.064374

================ sum.c static, 2000 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			31.000137	645.158432
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		3.999949	5000.064374

================ sum.c static, 200 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		7.000208	2857.058002

================ sum.c static, 20 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		8.000135	2499.957681

================ sum.c dynamic, 2000 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			30.000210	666.662004
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		3.999949	5000.064374

================ sum.c dynamic, 200 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			5.000114	3999.908449
Sum Parallel For:		6.999969	2857.155313

================ sum.c dynamic, 20 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			29.999971	666.667302
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		61.000109	327.868268

================ sum.c guided, 200000 ==================

======================================================================================================
	Sum 10000000 numbers with 8 tasks
------------------------------------------------------------------------------------------------------
Performance:		Runtime (ms)	 MFLOPS 
------------------------------------------------------------------------------------------------------
Sum Serial:			30.000210	666.662004
Sum Parallel:			4.999876	4000.099185
Sum Parallel For:		5.000114	3999.908449

